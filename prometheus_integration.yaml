#kind: PersistentVolumeClaim
#apiVersion: v1
#metadata:
#  name: nfs
#  annotations:
#    volume.beta.kubernetes.io/storage-class: "example-nfs"
#spec:
#  accessModes:
#    - ReadWriteMany
#  resources:
#    requests:
#      storage: 3Gi
#---

apiVersion: v1
kind: Service
metadata:
  name: monitoring
spec:
  selector:
    app: monitoring
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
      nodePort: 32222
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: NetworkPolicy
metadata:
  name: allow-external-access
spec:
  ingress:
  - ports:
    - port: 8000
      protocol: TCP
  podSelector:
    matchLabels:
      app: monitoring
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: monitoring
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
#         runAsUser: 199
#        fsGroup: 997
      containers:
      - name: traefik
        securityContext:
          runAsUser: 99
        image: registry_url/example/traefik:1.3.6
        args:
        - --file
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
        volumeMounts:
        - name: traefik-config
          mountPath: /etc/traefik
      - name: prometheus
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        image: registry_url/example/prometheus:v2.0.0
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        args:
          - "--config.file=/etc/prometheus/prometheus.yaml"
          #- "--storage.local.retention=730h"
          #- "--storage.local.memory-chunks=1048576"
          #- "--storage.tsdb.no-lockfile"
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus/data
        #- name: prometheus-data-hack-1
        #  mountPath: /data/archived_fingerprint_to_metric
        #- name: prometheus-data-hack-2
        #  mountPath: /data/archived_fingerprint_to_timerange
      - name: grafana
        securityContext:
          runAsNonRoot: true
        image:  registry_url/eedc_a_sitripa/grafana:latest
        imagePullPolicy: IfNotPresent
        #imagePullPolicy: Always
        ports:
        - name: grafana-http
          containerPort: 3000
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-log
          mountPath: /usr/share/grafana/data/log
        - name: grafana-data
          mountPath: /usr/share/grafana/data
      volumes:
      - name: traefik-config
        configMap:
          name: traefik-config
      - name: prometheus-config
        configMap:
          name: prometheus
      - name: prometheus-data
        #emptyDir: {}
        persistentVolumeClaim:
          claimName: nfs
         #claimName: data-persistence-disk
      #- name: prometheus-data-hack-1
      #  emptyDir: {}
      #- name: prometheus-data-hack-2
      #  emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-configmap
      - name: grafana-log
        emptyDir: {}
      - name: grafana-data
        emptyDir: {}





---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-config
data:
  traefik.toml: |
    debug = true
    checkNewVersion = false
    defaultEntryPoints = ["http"]
    [accessLog]
    [entryPoints]
      [entryPoints.http]
      address = ":8000"
    [frontends]
      [frontends.prometheus]
      backend = "prometheus"
      [frontends.grafana]
      backend = "grafana"
      passHostHeader = true
        [frontends.grafana.routes.ui]
        rule = "PathPrefixStrip:/grafana"
      [frontends.alertmanager]
      backend = "alertmanager"
      passHostHeader = true
        [frontends.alertmanager.routes.ui]
        rule = "PathPrefix:/alertmanager"
    [backends]
      [backends.grafana]
        [backends.grafana.servers.server1]
        url = "http://localhost:3000"
      [backends.prometheus]
        [backends.prometheus.servers.server1]
        url = "http://localhost:9090"
#      [backends.alertmanager]
#        [backends.alertmanager.servers.server1]
#        url = "http://localhost:9093"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
data:
  prometheus.yaml: |-
    global:
      scrape_interval: 10s
      external_labels:
        project: 'dhc02'
        datacenter: 'tss-emea'
    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 5s
        scrape_timeout: 5s
        metrics_path: /metrics
        static_configs:
          - targets:
            - 'localhost:9090'
      - job_name: 'quay-int-sanity'
        scrape_interval: 5s
        metrics_path: /metrics
        static_configs:
          - targets:
               - 'ip:9181'
      - job_name: 'quay-int-health-check'
        scrape_interval: 5s
        metrics_path: /metrics
        static_configs:
          - targets:
               - 'ip:9182'

      - job_name: 'bitbucket-prod'
        scrape_interval: 30s
        metrics_path: /metrics
        static_configs:
          - targets:
               - 'ip:9191'

      - job_name: 'quay_prod_sanity'
        scrape_interval: 30s
        metrics_path: /metrics
        static_configs:
          - targets:
               - 'ip:9192'

      - job_name: 'bb-prom-prod'
        scrape_interval: 30s
        scheme: https #change to http if don't you have https
        tls_config:
             insecure_skip_verify: true
        metrics_path: '/plugins/servlet/prometheus/metrics'
        params:
             token: ['production']
        static_configs:
          - targets: ['url']

      - job_name: 'quay-prom-prod'
        scrape_interval: 30s
        metrics_path: /metrics
        static_configs:
          - targets:
            - 'ip:9092'
            - 'ip:9092'
            - 'ip:9092'
            - 'ip:9092'


        #
      #- job_name: k8s-node
      #  scheme: https
      #  kubernetes_sd_configs:
      #  - api_servers:
      #    - "https://ip:443"
      #    in_cluster: true
      #    role: node
      #    tls_config:
      #      insecure_skip_verify: true
      #  tls_config:
      #    insecure_skip_verify: true
      #  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #  relabel_configs:
      #  - action: labelmap
      #    regex: __meta_kubernetes_node_label_(.+)

      #- job_name: kubernetes-pods
      #  kubernetes_sd_configs:
      #  - api_servers:
      #    - "https://10.254.0.1"
      #    in_cluster: true
      #    role: pod
      #    tls_config:
      #      insecure_skip_verify: true
      #  tls_config:
      #    insecure_skip_verify: true
      #  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #  relabel_configs:
      #    - source_labels: [__meta_kubernetes_role, __meta_kubernetes_pod_annotation_prometheus_io_scrape]
      #      action: keep
      #      regex: pod;true
      #    - action: replace
      #      regex: (.+)
      #      replacement: "${1}"
      #      source_labels:
      #        - __meta_kubernetes_pod_annotation_prometheus_io_metrics
      #      target_label: __metrics_path__
      #    - action: replace
      #      regex: "(.+);(\\d+)"
      #      replacement: "${1}:${2}"
      #      source_labels:
      #        - __meta_kubernetes_pod_address
      #        - __meta_kubernetes_pod_annotation_prometheus_io_port
      #      target_label: __address__
      #    - action: labelmap
      #      regex: __meta_kubernetes_pod_label_(.+)
      #    - action: replace
      #      source_labels:
      #        - __meta_kubernetes_pod_namespace
      #      target_label: kubernetes_namespace
      #    - action: replace
      #      source_labels:
      #        - __meta_kubernetes_pod_name
      #      target_label: kubernetes_pod_name


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-configmap
data:
  grafana.ini: |-
      [server]
      root_url = %(protocol)s://%(domain)s:/grafana
      [paths]
      data = /var/lib/grafana
      logs = /var/log/grafana
      plugins = /var/lib/grafana/plugins
      [security]
      admin_user = quay-mon
      admin_password = D@imler@EDC@quay2017
      [smtp]
      enabled = false
      [dashboards.json]
      enabled = true
